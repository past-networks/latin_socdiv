eval_sample %>%
unnest(occups) %>%
select(reference, lemmata, occups)
eval_sample %>%
unnest(occups) %>%
select(reference, occups)
eval_sample %>%
unnest(occups) %>%
select(reference, occups)  -> manual_eval
write_csv(manual_eval, "manual_eval_detection_method_1000.csv")
eval_sample %>%
unnest(occups)
eval_sample %>%
filter(reference == "IG I³
386")
eval_sample %>%
filter(reference == "IG I³386") %>%
unnest(lemmata)
eval_sample %>%
filter(reference == "IG I³386")
eval_sample %>%
filter(reference == "IG I³386")
eval_sample %>%
filter(reference == "IG I³386")
eval_sample %>%
filter(reference == "IG I³
386") %>%
unnest(lemmata)
eval_sample %>%
filter(reference == "IG I³
386")
eval_sample %>%
unnest(occups) %>%
select(PHI_ID, reference, occups)  -> manual_eval
write_csv(manual_eval, "manual_eval_detection_method_1000.csv")
eval_sample %>%
filter(PHI_ID == "398") %>%
unnest(lemmata)
eval_sample %>%
filter(PHI_ID == 398) %>%
unnest(lemmata)
eval_sample %>%
filter(PHI_ID == 398) %>%
unnest(lemmata) %>%
str_detect(lemmata, "χαλκεύς")
eval_sample %>%
filter(PHI_ID == 398) %>%
grep(lemmata, "χαλκεύς")
eval_sample %>%
filter(PHI_ID == 398) -> inscription
pattern <- "χαλκεύς"
sapply(inscription$lemmata, function(patterns) {
any(sapply(patterns, function(pattern) str_detect(string_to_match, pattern)))
})
any(sapply(patterns, function(pattern) str_detect(inscription, pattern)))
sapply(inscription$lemmata, function(lemmata) {
any(sapply(lemmata, function(pattern) str_detect(inscription, pattern)))
})
pattern <- "test"
pattern <- "χαλκεύς"
sapply(inscription$lemmata, function(lemmata) {
any(sapply(lemmata, function(pattern) str_detect(inscription, pattern)))
})
eval_sample %>%
filter(PHI_ID == 399) -> inscription
pattern <- "χαλκεύς"
sapply(inscription$lemmata, function(lemmata) {
any(sapply(lemmata, function(pattern) str_detect(inscription, pattern)))
})
eval_sample %>%
filter(PHI_ID == 407) -> inscription
pattern <- "ἀρχιτέκτων"
sapply(inscription$lemmata, function(lemmata) {
any(sapply(lemmata, function(pattern) str_detect(inscription, pattern)))
})
eval_sample %>%
filter(PHI_ID == 1161) -> inscription
pattern <- "κεραμεύς"
sapply(inscription$lemmata, function(lemmata) {
any(sapply(lemmata, function(pattern) str_detect(inscription, pattern)))
})
eval_sample %>%
filter(PHI_ID == 1189) -> inscription
pattern <- "φιλόσοφος"
sapply(inscription$lemmata, function(lemmata) {
any(sapply(lemmata, function(pattern) str_detect(inscription, pattern)))
})
eval_sample %>%
filter(PHI_ID == 1339) -> inscription
pattern <- "ποιμήν"
sapply(inscription$lemmata, function(lemmata) {
any(sapply(lemmata, function(pattern) str_detect(inscription, pattern)))
})
eval_sample %>%
filter(PHI_ID == 1350) -> inscription
pattern <- "ποιμήν"
sapply(inscription$lemmata, function(lemmata) {
any(sapply(lemmata, function(pattern) str_detect(inscription, pattern)))
})
eval_done<- read_csv("manual_eval_detection_method_1000_IN.csv")
eval_done
eval_done<- read_csv("manual_eval_detection_method_1000_IN.csv")
eval_done
eval_done %>%
count(correct)
eval_done %>%
count(correct) %>%
mutate(ratio = n/nrow(eval_done)/100))
eval_done %>%
count(correct) %>%
mutate(ratio = n/(nrow(eval_done)/100))
# Apply the function to each row in the 'text' column
GIST$occups <- lapply(GIST$lemmata, find_occupations, occupations = occups$Term)
GIST %>%
unnest(occups) %>%
count(occups, sort=T)
GIST %>%
filter(!is.na(occups)) %>%
unnest(occups) %>%
count(occups, sort=T)
# 4624 inscriptions with at least one occupation
# 5389 occurrences of occupation
# 151 unique occupations
GIST %>%
unnest(occups)
GIST %>%
filter(!is.na(occups)) %>%
unnest(occups)
GIST %>%
filter(!is.na(occups))
library(jsonlite)
knitr::opts_chunk$set(echo = TRUE)
library(sf)
library(sfarrow)
library(tidyverse)
library(jsonlite)
library(tidyr)
library(ggplot2)
library(viridis)
library(arrow)
library(stringr)
GIST <- read_parquet("../../../data/large_data/GIST_v1-1.parquet")
occups <- read_tsv("../../../data/Occupations_GREEK.tsv")
# Ensure `occups` is a data frame and `Morphological_dictionary` is a character vector
occups <- as.data.frame(occups) %>%
mutate(Morphological_dictionary = as.character(Morphological_dictionary))
# Extract `Morphological_dictionary` as a separate character vector
morphological_terms <- occups$Morphological_dictionary
# Wrap each term in word boundaries to improve matching accuracy
morphological_terms <- str_c("\\b", morphological_terms, "\\b")
# Define a function to find all occurrences of terms within the text
find_terms_in_text <- function(text, terms) {
# Create a regex pattern from the terms with boundaries
pattern <- str_c(terms, collapse = "|")
# Use str_extract_all to find all occurrences and return as a list
str_extract_all(text, pattern)[[1]]
}
# Apply function row-wise to `GIST`
result <- GIST %>%
rowwise() %>%
mutate(
occup_list_morph = list(find_terms_in_text(clean_text_interpretive_word, morphological_terms))
) %>%
ungroup() %>%
filter(lengths(occup_list_morph) > 0)  # Keep rows where matches were found
# Ensure `occups` is a data frame and `Morphological_dictionary` is a character vector
occups <- as.data.frame(occups) %>%
mutate(Morphological_dictionary = as.character(Morphological_dictionary))
# Extract `Morphological_dictionary` as a separate character vector
morphological_terms <- occups$Morphological_dictionary
# Wrap each term in word boundaries to improve matching accuracy
morphological_terms <- str_c("\\b", morphological_terms, "\\b")
# Define a function to find all occurrences of terms within the text
find_terms_in_text <- function(text, terms) {
# Create a regex pattern from the terms with boundaries
pattern <- str_c(terms, collapse = "|")
# Use str_extract_all to find all occurrences and return as a list
str_extract_all(text, pattern)[[1]]
}
# Apply function row-wise to `GIST`
result <- GISTsample %>%
rowwise() %>%
mutate(
occup_list_morph = list(find_terms_in_text(clean_text_interpretive_word, morphological_terms))
) %>%
ungroup() %>%
filter(lengths(occup_list_morph) > 0)  # Keep rows where matches were found
# Display the result
result
View(result)
# Ensure proper encoding (UTF-8 is common for Greek)
GISTsample <- GISTsample %>%
mutate(clean_text_interpretive_word = enc2utf8(clean_text_interpretive_word))
occups <- as.data.frame(occups) %>%
mutate(Morphological_dictionary = as.character(enc2utf8(Morphological_dictionary)))
# Extract morphological terms as a character vector and add boundaries
morphological_terms <- str_c("\\b", occups$Morphological_dictionary, "\\b")
# Test each term individually to identify potential matching issues
test_results <- GISTsample %>%
rowwise() %>%
mutate(
# Check for each term individually in `clean_text_interpretive_word`
occup_list_morph = list(
unlist(lapply(morphological_terms, function(term) {
# Try to match each term individually and capture the results
matches <- str_extract_all(clean_text_interpretive_word, term)[[1]]
if (length(matches) > 0) matches else NULL
}))
)
) %>%
ungroup() %>%
filter(lengths(occup_list_morph) > 0)  # Filter to keep rows with matches
# Display the results
test_results
# Extract terms from `Morphological_dictionary` in `occups` dataset as a single regex pattern
term_pattern <- occups %>%
pull(Morphological_dictionary) %>%
str_c(collapse = "|")  # Combine all terms with `|` for regex OR
# Check if the pattern was constructed correctly (for debugging)
print("Constructed term pattern:")
print(term_pattern)
# Apply term matching to each row in `GISTsample`
GISTsample_result <- GISTsample %>%
mutate(
# Extract all occurrences of terms within `text_clean_interpretive_word`
occup_list_morph = str_extract_all(text_clean_interpretive_word, term_pattern)
) %>%
# Filter to retain rows with at least one match
filter(lengths(occup_list_morph) > 0)
# Extract terms from `Morphological_dictionary` in `occups` dataset as a single regex pattern
term_pattern <- occups %>%
pull(Morphological_dictionary) %>%
str_c(collapse = "|")  # Combine all terms with `|` for regex OR
# Check if the pattern was constructed correctly (for debugging)
print("Constructed term pattern:")
print(term_pattern)
# Apply term matching to each row in `GISTsample`
GISTsample_result <- GISTsample %>%
mutate(
# Extract all occurrences of terms within `text_clean_interpretive_word`
occup_list_morph = str_extract_all(clean_text_interpretive_word, term_pattern)
) %>%
# Filter to retain rows with at least one match
filter(lengths(occup_list_morph) > 0)
# Display the result with matches
GISTsample_result
library(dplyr)
library(stringr)
# Extract terms from `Morphological_dictionary` in `occups` dataset as a single regex pattern
term_pattern <- occups %>%
pull(Morphological_dictionary) %>%
str_c(collapse = "|")  # Combine all terms with `|` for regex OR
# Check if the pattern was constructed correctly (for debugging)
print("Constructed term pattern:")
print(term_pattern)
# Apply term matching to each row in `GISTsample`
GISTsample_result <- GISTsample %>%
mutate(
# Extract all occurrences of terms within `clean_text_interpretive_word`
occup_list_morph = str_extract_all(clean_text_interpretive_word, term_pattern)
) %>%
# Filter to retain rows with at least one match
filter(lengths(occup_list_morph) > 0)
# Display the result with matches
GISTsample_result
occups
occups %>%
as.list(Morphological_dictionary, sep=", ")
str_subset(GISTsample$clean_text_interpretive_word, occups$Morphological_dictionary)
GISTsample$clean_text_interpretive_word in%in occups$Morphological_dictionary
GISTsample$clean_text_interpretive_word %in% occups$Morphological_dictionary
occups$Morphological_dictionary
GISTsample$clean_text_interpretive_word %in% as.list(occups$Morphological_dictionary, sep = ", ")
as.list(occups$Morphological_dictionary, sep = ", ")
GISTsample$clean_text_interpretive_word %in% to_list(occups$Morphological_dictionary, sep = ", ")
GISTsample$clean_text_interpretive_word %in% str_split(occups$Morphological_dictionary, pattern = ", ")
str_split(occups$Morphological_dictionary, pattern = ", ")
morphlist<- str_split(occups$Morphological_dictionary, pattern = ", ")
str_match_all(GISTsample$clean_text_interpretive_word, morphlist)
str_match(GISTsample$clean_text_interpretive_word, morphlist)
library(dplyr)
library(stringr)
morphlist<- str_split(occups$Morphological_dictionary, pattern = ", ")
# Step 2: Define a function to check for individual term matches in `clean_text_interpretive_word`
find_individual_matches <- function(text, terms) {
# For each term, check if it is present in `text` and store matches
matches <- unlist(lapply(terms, function(term) {
if (str_detect(text, fixed(term))) term else NULL  # fixed() for exact match
}))
unique(matches)  # Return unique matches
}
# Step 3: Apply the function row-wise on `GISTsample`
GISTsample_result <- GISTsample %>%
rowwise() %>%
mutate(
# Apply function to find individual matches for each `clean_text_interpretive_word`
occup_list_morph = list(find_individual_matches(clean_text_interpretive_word, unlist(morphlist)))
) %>%
ungroup() %>%
# Keep only rows with at least one match
filter(lengths(occup_list_morph) > 0)
# Display results
GISTsample_result
# Display results
GISTsample_result$occup_list_morph
# Display results
GISTsample_result
knitr::opts_chunk$set(echo = TRUE)
library(sf)
library(sfarrow)
library(tidyverse)
library(jsonlite)
library(tidyr)
library(ggplot2)
library(viridis)
library(arrow)
library(stringr)
library(dplyr)
library(stringr)
morphlist<- str_split(occups$Morphological_dictionary, pattern = ", ")
# Step 2: Define a function to check for individual term matches in `clean_text_interpretive_word`
find_individual_matches <- function(text, terms) {
# For each term, check if it is present in `text` and store matches
matches <- unlist(lapply(terms, function(term) {
if (str_detect(text, fixed(term))) term else NULL  # fixed() for exact match
}))
unique(matches)  # Return unique matches
}
# Step 3: Apply the function row-wise on `GISTsample`
GIST_result <- GIST %>%
rowwise() %>%
mutate(
# Apply function to find individual matches for each `clean_text_interpretive_word`
occup_list_morph = list(find_individual_matches(clean_text_interpretive_word, unlist(morphlist)))
) %>%
ungroup() %>%
# Keep only rows with at least one match
filter(lengths(occup_list_morph) > 0)
# Display results
GIST_result
# Display results
GIST_result$occup_list_morph
# Display results
GIST_result$occup_list_morph %>%
count()
# Display results
GIST_result$occup_list_morph %>%
unlist() %>%
count()
# Display results
GIST_result$occup_list_morph %>%
unlist() %>%
count()
# Display results
GIST_result$occup_list_morph %>%
unnest() %>%
count()
# Display results
GIST_result$occup_list_morph %>%
unnest() %>%
count()
# Display results
GIST_result %>%
unnest(occup_list_morph) %>%
count()
# Display results
GIST_result %>%
unnest(occup_list_morph) %>%
count(occup_list_morph)
# Display results
GIST_result %>%
unnest(occup_list_morph) %>%
count(occup_list_morph, sort=T)
GIST %>%
#filter(occups %in% "ἁλιεύς")
filter(clean_text_interpretive_word %in% str_subset(clean_text_interpretive_word, "Ἁλαιεὺς|Ἁλαιεύς"))
GISTfix <-GIST %>%
filter(!clean_text_interpretive_word %in% str_subset(clean_text_interpretive_word, "Ἁλαιεὺς|Ἁλαιεύς"))
GIST %>%
filter(occups %in% "ἁλιεύς")
GISTfix %>%
filter(occups %in% "ἁλιεύς")
GIST %>%
#filter(occups %in% "ἁλιεύς")
filter(clean_text_interpretive_word %in% str_subset(clean_text_interpretive_word, "ἁλιεὺς|ἁλιεύς"))
GIST %>%
filter(clean_text_interpretive_word %in% str_subset(clean_text_interpretive_word, "ἁλιεὺς|ἁλιεύς"))
GIST %>%
filter(clean_text_interpretive_word %in% str_subset(clean_text_interpretive_word, "ἁλιεύς"))
str_subset(clean_text_interpretive_word, "ἁλιεύς")
GIST %>%
#filter(occups %in% "ἁλιεύς")
filter(clean_text_interpretive_word %in% str_subset(clean_text_interpretive_word, "Ἁλαιεὺς|Ἁλαιεύς"))
GISTfix <-GIST %>%
filter(!clean_text_interpretive_word %in% str_subset(clean_text_interpretive_word, "Ἁλαιεὺς|Ἁλαιεύς"))
GISTfix %>%
filter(clean_text_interpretive_word %in% str_subset(clean_text_interpretive_word, "ἁλιεύς"))
GIST %>%
filter(clean_text_interpretive_word %in% str_subset(clean_text_interpretive_word, "ἁλιεύς"))
GISTfix %>%
filter(!is.na(occups)) %>%
unnest(occups) %>%
count(occups, sort=T)
GISTfix %>%
filter(!is.na(occups)) %>%
unnest(occups) %>%
count(occups, sort=T)
test<- c("ἁλιεύς", "ἁλιέως", "ἁλιῶς", "ἁλιεῖ", "ἁλιᾶ", "ἁλιέᾱ", "ἁλιεῦ",
"ἁλιῆ", "ἁλιέοιν",
"ἁλιῆς", "ἁλιεῖς", "ἁλιέων", "ἁλιῶν", "ἁλιεῦσῐ","ἁλιεῦσῐν", "ἁλιέᾱς", "ἁλιᾶς")
GIST %>%
filter(clean_text_interpretive_word %in% str_subset(clean_text_interpretive_word, pattern = "ἁλιεύς"))
# Combine words into a pattern, ensuring it’s not preceded by an uppercase Greek letter
# This version will use a lookbehind for spaces or word boundaries before each term
pattern <- paste0("(?<![[:upper:]])\\b(", paste(test, collapse = "|"), ")\\b")
# Add a new column with the detected term if found, otherwise NA
GIST <- GIST %>%
mutate(detected_term = str_extract(clean_text_interpretive_word, pattern))
# Filter to show only rows with a detected term (optional)
filtered_data <- GIST %>%
filter(!is.na(detected_term))
# Display the result
filtered_data
filtered_data$occups
knitr::opts_chunk$set(echo = TRUE)
library(sf)
library(sfarrow)
library(tidyverse)
library(jsonlite)
library(tidyr)
library(ggplot2)
library(viridis)
library(arrow)
library(stringr)
GIST <- read_parquet("../../../data/large_data/GIST_v1-1.parquet")
occups <- read_tsv("../../../data/Occupations_GREEK.tsv")
# Helper function to escape special characters in regex patterns
escape_special_chars <- function(occupation) {
# Escape regex special characters
return(str_replace_all(occupation, "([\\^\\$\\.\\*\\+\\?\\(\\)\\[\\]\\{\\}\\|])", "\\\\\\1"))
}
# Function to find occupations with word boundaries and escaped characters
find_occupations <- function(text, occupations) {
# Escape special characters and add word boundaries for each occupation
occupations_escaped <- sapply(occupations, function(occ) paste0("\\b", escape_special_chars(occ), "\\b"))
# Check for matches of each escaped occupation within the text
matches <- occupations[sapply(occupations_escaped, function(occ_pattern) str_detect(text, occ_pattern))]
# Return unique matches or NA if none found
if (length(matches) == 0) {
return(NA)
} else {
return(unique(matches))
}
}
GISTsample <- head(GIST, 5000)
GISTsample$occups <- lapply(GISTsample$lemmata, find_occupations, occupations = occups$Term)
eval_sample %>%
filter(PHI_ID == 1350) -> inscription
pattern <- "ποιμήν"
sapply(inscription$lemmata, function(lemmata) {
any(sapply(lemmata, function(pattern) str_detect(inscription, pattern)))
})
# Apply the function to each row in the 'text' column
GIST$occups <- lapply(GIST$lemmata, find_occupations, occupations = occups$Term)
GIST %>%
unnest(occups) %>%
count(occups, sort=T)
GIST %>%
unnest(occups) %>%
count(occups, sort=T)
# Apply the function to each row in the 'text' column
GIST$occups <- lapply(GIST$lemmata, find_occupations, occupations = occups$Term)
knitr::opts_chunk$set(echo = TRUE)
library(sf)
library(sfarrow)
library(tidyverse)
library(jsonlite)
library(tidyr)
library(ggplot2)
library(viridis)
library(arrow)
library(stringr)
GIST %>%
filter(!is.na(occups)) %>%
unnest(occups) %>%
count(occups, sort=T)
knitr::opts_chunk$set(echo = TRUE)
library(sf)
library(sfarrow)
library(tidyverse)
library(jsonlite)
library(tidyr)
library(ggplot2)
library(viridis)
library(arrow)
library(stringr)
GIST <- read_parquet("../../../data/large_data/GIST_v1-1.parquet")
occups <- read_tsv("../../../data/Occupations_GREEK.tsv")
View(occups)
GISTsample <- head(GIST, 5000)
GISTsample$occups <- lapply(GISTsample$lemmata, find_occupations, occupations = occups$Term)
GIST_result
GISTsample %>%
unnest(occups) %>%
count(occups, sort=T)
GISTsample <- head(GIST, 1000)
GISTsample$occups <- lapply(GISTsample$lemmata, find_occupations, occupations = occups$Term)
# Apply the detection function to each row in the 'text' column
GIST$occups <- lapply(GIST$lemmata, find_occupations, occupations = occups$Term)
GIST %>%
unnest(occups) %>%
count(occups, sort=T)
